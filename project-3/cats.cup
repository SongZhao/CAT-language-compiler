/**********************************************************************
 Java CUP specification for a parser for cats programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;
terminal                UMINUS;

/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal LinkedList       varDeclList;
non terminal FnDeclNode	      fnDecl;
non terminal StructDeclNode   structDecl;
non terminal LinkedList       structBody;
non terminal FormalsListNode  formals;
non terminal LinkedList       formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal LinkedList       stmtList;
non terminal StmtNode         stmt;
non terminal AssignNode    assignExp;
non terminal ExpNode          term;
non terminal CallExpNode      fncall;
non terminal ExpNode          loc;
non terminal ExpNode	      exp; 
non terminal LinkedList       actualList;
/* NOTE: Add precedence and associativity declarations here */

precedence left DOT;
precedence right ASSIGN;
precedence nonassoc EQUALS, NOTEQUALS, LESS, GREATER, LESSEQ, GREATEREQ;
precedence left AND, OR;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left NOT;
precedence left UMINUS;


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
		|fnDecl:fD
		{: RESULT = fD;
		:}
		|structDecl:sD
		{: RESULT = sD;
		:}
                ;
varDeclList	::= varDeclList vl varDecl v
		{: vl.addLast(v);
		   RESULT = vl;
		:}
		|/*epsilon*/
		{: RESULT = new LinkedList<VarDeclNode>();
		:} 


varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
		|STRUCT id:a id:b SEMICOLON
		{: RESULT = new VarDeclNode(new StructNode(a), b, VarDeclNode.NOT_STRUCT); //whats the size here?
		:}
                ;

fnDecl		::= type:t id:i formals:f fnBody:fB
		{: RESULT = new FnDeclNode(t,i,f,fB);
		:}
		;

structDecl	::= STRUCT id:i LCURLY structBody:sB RCURLY SEMICOLON
		{: RESULT = new StructDeclNode(i,new DeclListNode(sB));
		:}
		;
structBody	::= structBody:dl varDecl:vd
		{: dl.addLast(vd);
		   RESULT = dl;
		:}
		|varDecl:vd
		{: LinkedList<VarDeclNode> s = new LinkedList<VarDeclNode>();
		   s.addLast(vd);
		   RESULT = s;
		:}
		;

formals		::= LPAREN RPAREN
		{: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
		:}
		|LPAREN formalsList:fl RPAREN
		{: RESULT = new FormalsListNode(fl);
		:}
		;

formalsList	::= formalDecl:fd
		{: LinkedList<FormalDeclNode> l = new LinkedList<FormalDeclNode>();
		   l.addFirst(fd);
		   RESULT = l;
		:}
		|formalDecl:fd COMMA formalsList:fl
		{: fl.addFirst(fd);
		   RESULT = fl;
		:}
		;

formalDecl	::= type:t id:i
		{: RESULT = new FormalDeclNode(t,i);
		:}
		;

fnBody		::= LCURLY varDeclList:vdl stmtList:sl RCURLY
		{: RESULT = new FnBodyNode(new DeclListNode(vdl),new StmtListNode(sl));
		:}
		;

stmtList	::= stmtList:sl	stmt:s
		{: sl.addLast(s);
		   RESULT = sl;
		:}
		|/* epsilon */
		{: RESULT = new LinkedList<StmtNode>();
		:}
		;

stmt 		::= assignExp:ae SEMICOLON
		{: RESULT = new AssignStmtNode(ae);
		:}
                | loc:l PLUSPLUS SEMICOLON
		{: RESULT = new PostIncStmtNode(l);
		:}
                | loc:l MINUSMINUS SEMICOLON
		{: RESULT = new PostDecStmtNode(l);
		:}
                | CIN READ loc:l SEMICOLON
		{: RESULT = new ReadStmtNode(l);
		:}
                | COUT WRITE exp:e SEMICOLON
		{: RESULT = new WriteStmtNode(e);
		:}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:sl RCURLY
		{: RESULT = new IfStmtNode(e,
		   new DeclListNode(vdl), 
		   new StmtListNode(sl));
		:}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vdl1 stmtList:sl1 RCURLY ELSE LCURLY varDeclList:vdl2 stmtList:sl2 RCURLY
		{: RESULT = new IfElseStmtNode(e,new DeclListNode(vdl1), new StmtListNode(sl1),new DeclListNode(vdl2),new StmtListNode(sl2));
		:}
                |WHILE LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:sl RCURLY
		{: RESULT = new WhileStmtNode(e,new DeclListNode(vdl),new StmtListNode(sl));
		:}
		|RETURN exp:e SEMICOLON
		{: RESULT = new ReturnStmtNode(e);
		:}
                | RETURN SEMICOLON
		{: RESULT = new ReturnStmtNode(null);
		:}
                |fncall:fc SEMICOLON
		{: RESULT = new CallExpNode(fc);
		:}
		;

assignExp	::= loc:l ASSIGN exp:e
		{: RESULT = new AssignNode(l,e);
		:}
		;


exp		::= assignExp:ae
		{: RESULT = ae;
		:}
		|exp:e1 PLUS exp:e2
		{: RESULT = new PlusNode(e1, e2);
		:}
		|exp:e1 MINUS exp:e2
		{: RESULT = new MinusNode(e1, e2);
		:}
		|exp:e1 TIMES exp:e2
		{: RESULT = new TimesNode(e1, e2);
		:}
		|exp: e1 DIVIDE exp: e2
		{: RESULT = new DivideNode(e1, e2);
		:}
		|NOT exp:e	
		{: RESULT = new NotNode(e);
		:}
		|exp:e1 AND exp:e2
		{: RESULT = new AndNode(e1,e2);
		:}
		|exp:e1 OR exp:e2
		{: RESULT = new OrNode(e1,e2);
		:}
		|exp:e1 EQUALS exp:e2
		{: RESULT = new EqualsNode(e1,e2);
		:}
		|exp:e1 NOTEQUALS exp:e2
		{: RESULT = new NotEqualsNode(e1,e2);
		:}
		|exp:e1 LESS exp:e2
		{: RESULT = new LessNode(e1,e2);
		:}
		|exp:e1 GREATER exp:e2
		{: RESULT = new GreaterNode(e1,e2);
		:}
		|exp:e1 LESSEQ exp:e2
		{: RESULT = new LessEqNode(e1,e2);
		:}
		|exp:e1 GREATEREQ exp:e2
		{: RESULT = new GreaterEqNode(e1,e2);
		:}
		|MINUS	term:t
		{: RESULT = new UnaryMinusNode(t);
		:}
		%prec UMINUS
		|term:t
		{: RESULT = t;
		:}
		;

term		::= loc:l
		{: RESULT = l;
		:}
		|INTLITERAL:il
		{: RESULT = new IntLitNode(il.linenum,il.charnum,il.intVal);
		:}
		|STRINGLITERAL:sl
		{: RESULT = new StringLitNode(sl.linenum,sl.charnum,sl.strVal);
		:}
		|TRUE:t2
		{: RESULT = new TrueNode(t2.linenum,t2.charnum);
		:}
		|FALSE:f
		{: RESULT = new FalseNode(f.linenum,f.charnum);
		:}
		|LPAREN	exp:e	RPAREN
		{: RESULT = e;
		:}	
		|fncall:fc
		{: RESULT = fc;
		:}
		;

fncall		::= id:i LPAREN RPAREN
		{: RESULT = new CallExpNode(i);
		:}
		|id:i LPAREN actualList:al RPAREN
		{: RESULT = new CallExpNode(i, new ExpListNode(al));
		:}
		;

actualList	::= exp:e
		{: LinkedList<ExpNode> al = new LinkedList();
		   al.addLast(e);
		   RESULT = al;
		:}
		|actualList:al COMMA exp:e
		{: al.addLast(e);
		   RESULT =al;
		:}
		;
			

type            ::= INT
                {: RESULT = new IntNode();
                :}
		|BOOL
		{: RESULT = new BoolNode();
		:}
		|VOID
		{: RESULT = new VoidNode();
		:}
                ;

loc		::= id:i
		{: RESULT = i;
		:}
		| loc:l DOT id:i
		{: RESULT = new DotAccessExpNode(l,i);
		:}
		;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;


				
